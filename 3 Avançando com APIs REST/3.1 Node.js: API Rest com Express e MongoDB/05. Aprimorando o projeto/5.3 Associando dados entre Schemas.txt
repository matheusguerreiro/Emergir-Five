[00:00] Aqui temos uma entidade autor e temos uma entidade livro e eu vou precisar associar os dados dos dois. Quando eu cadastrar um livro ao invés de colocar o nome do autor eu vou colocar o ID do autor e quando eu puxá-lo com o método get, com a requisição get automaticamente tem que acontecer essa associação dele me mostrar o nome, a nacionalidade e todos os campos que eu tiver definidos para o autor.

[00:35] Para fazer isso vamos lá no "model > Livro.js" e eu vou trocar aqui o tipo que está no autor, ao invés de colocar aqui o type como string eu vou colocar que ele é uma referência para o modelo de autor. Para fazer isso eu vou colocar assim: autor: {type: mongoose.Schema.Types.ObjectId, required: true}, por vai ser o ID de um objeto a referência que vai entrar aqui é um ID de um outro objeto e não um texto em string.

[01:30] Vamos colocar também de parâmetro o ref que é a referência, ele é um ID de entidade autores, eu vou colocar aqui lá do model autores e vou manter aqui o requerido. autor: {type: mongoose.Schema.Types.ObjectId, ref: 'autores', required: true},.

[01:48] A princípio no nosso modelo de livros essa vai ser a única diferença trocar o tipo e incluir a referência para autores. Quando formos programar os métodos vamos precisar usar outro comando chamado populate para ele popular os dados com a informação que eu quero. Vamos aqui no "livros.Controller.js" e vamos começar pelo método listarLivros.

[02:24] Aqui no listarLivrosonde eu fazia o find eu vou trocá-lo pelo seguinte, o find vai ficar só livros.find() e depois eu vou fazer um .populate. No populate eu quero popular o campo autor, .populate('autor'). Por fim, essa linha debaixo que passávamos a callback vamos chamá-la com .execute((err, livros) => { res.status(200).json(livros) }).

[03:01] O nosso método ficará assim: livros.find, que ele encontra os livros, popular com os dados de autor e aí executa para ver se o status se está tudo certo, se vai conseguir devolvendo os livros. Basicamente isso aqui já atende ao que queremos só que precisamos fazer uma pequena alteração, lá no livro eu tinha incluído ele como uma string que era o nome, agora eu vou incluir com ID do autor que estiver cadastrado para que possamos ver isso acontecendo. Vamos fazer isso lá no Postman.

[03:44] Aqui no Postman eu tenho de autores um autor só, Jacqueline Magalhães, eu vou copiar esse ID e vou fazer uma alteração, um PUT lá no livros. Aqui no livros eu vou fazer um PUT alterando o autor e passando esse ID, eu só preciso ver o ID de quem eu alterar. Antes de fazer esse PUT eu vou fazer um get e vou pegar o ID do livro. Não funcionou porque o Get livros, no listarLivros está com o populate que não funciona porque não tem o autor. Eu vou fazer o contrário, eu vou fazer o PUT aqui e o ID do livro eu vou pegar lá no nosso banco no Mongo.

[05:00] Aqui no Mongo eu tenho o livro e o ID dele é esse aqui, eu vou copiá-lo e vou dizer que ao invés do autor Paulo Silveira eu vou passar aquele ID que eu quero alterar. O PUT vai ser nesse ID de livro e o campo autor que hoje em dia está aqui, como Paulo Silveira, eu vou passar o ID do meu autor cadastrado.

[05:31] Quando eu faço isso ele me dá a mensagem: "Livro atualizado com sucesso" e agora eu vou obter os livros, vou fazer um GET no método livros para que ele possa fazer essa associação para mim. Eu vou tirar aqui o ID, vou fazer o GET e não funcionou novamente porque não é execute é exec((erro, livros) => {, o comando é para executar, mas chama-se exec e não execute.

[06:10] Quando eu fizer agora ele já mostrou certinho, ele já passou um objeto autor, o Id, o nome e a nacionalidade. Conseguiu fazer essa associação pelo ID indicando com essa referência através do populate e da alteração lá no model do livro para o modelo que queremos usar que nesse caso era o modelo de autor, o ID de um autor. Ele fez toda essa validação e já conseguiu nos mostrar.

[06:46] Eu vou fazer esse mesmo ajuste lá no obterPorId só para conseguirmos ver que eu posso escolher também os campos que ele vai demonstrar. Aqui quando eu passo só autor ele pega todo o objeto autor e mostra aqui, mas eu poderia pedir para ele mostrar somente o nome, eu não quero que mostre nacionalidade, eu quero que mostre o nome. Vamos fazer isso no obterPorId.

[07:16] Aqui no VS Code no método listarLivroPorId vamos fazer aqui o mesmo processo, o findById vai ficar aqui com abre e fecha, depois vamos ter o .populate aqui em baixo e nele vou dizer que é para popular o atributo autor, vou colocar com a aspas simples para ficar no padrão, .populate('autor', ), só que eu só quero o nome vou passar nome para ele só me mostrar o nome, .populate('autor', 'nome'). Aqui embaixo no .exec(err, livros) => { if(err), ele vai continuar fazendo o que ele já fazia, que ir lá, buscar os livros, ver se tem ou não tem o livro.

[08:11] Vamos olhar agora o obterPorId. No Postman estamos vendo o listarTodos agora vamos buscar o listarPorId. O livro é esse vou passar esse ID de livro e ele já me mostrou agora de forma diferenciada, o ID que ele sempre traz a referência é o nome, já omitiu o campo de nacionalidade.

[08:40] Assim, de forma bem simples, conseguimos associar qualquer dado um ao outro. Eu tenho coleções separadas em vários pontos, eu tenho a editora, eu tenho o autor, eu tenho o livro, eu tenho pagamento e se eu alimentar a entidade livro com os IDs corretos do que tem nas outras coleções, através do populate eu consigo visualizar todo esse resultado junto, sem tem que ter cadastrado previamente assim com todos os dados, basta que eu informe o ID.

[09:19] Essa era a proposta desse vídeo, mostrar essa associação, deixar um desafio para depois você tentar fazer com editora também o mesmo procedimento que fizemos com autor. No próximo vídeo vamos ver a parte de criar consultas diferenciadas, criar consultas pela editora ou pelo nome do autor, fazer alguma consulta diferente para fecharmos aqui a nossa aula.