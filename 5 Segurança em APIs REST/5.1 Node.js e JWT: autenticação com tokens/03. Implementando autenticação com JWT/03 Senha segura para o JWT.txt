[00:00] Agora que sabemos que a geração do nosso Token funciona, podemos voltar lá atrás, e ver um passo que deixamos um pouco de lado. Se formos ao nosso código, na geração do nosso Token, como senha, usamos uma sign chamada senha secreta. Só que na explicação de como o JWT funciona, vemos que a nossa senha é o que torna todo nosso Token seguro.

[00:29] Então é importante que ele seja de alguma forma mais seguro e forte possível, e para resolver isso, um dos métodos de gerar senhas seguras é usando geradores de números aleatórios, ou gerador de números pseudoaleatórios, que vai ser o nosso caso. Para isso, vamos abrir o terminal no nosso projeto, vamos usar uma biblioteca do Node que já vem com o próprio Node que se chama cripto.

[01:08] Então podemos rodar um programa com node -e para executar esse comando no string, que vai imprimir o resultado de uma função do módulo crypto. Que função que esse módulo tem? Ele tem a função randomBytes, essa função gera bytes pseudoaleatórios de acordo com a quantidade que você quer, nosso caso vamos gerar 256 bytes que é basicamente uma string com 256 caracteres e vamos quantificar isso para uma string no formato base64.

[02:05] Com isso, temos esse resultado, essa string grande é uma senha muito mais segura do que apenas uma senha secreta, como tínhamos colocado. Então um método de colocar isso em nossa aplicação é copiar essa string e substituir a senha secreta por isso.

[02:30] Além dos erros de formatação que isso levou, que nesse caso poderia ser só substituídas por essa formatação de string. Colocar uma senha secreta dentro do seu código, não é a maneira mais indicada, principalmente em algum outro código quando você usa controle de versão, por exemplo, o git, onde seu código é público, eventualmente isso vai tornar a sua senha secreta pública.

[03:05] Para resolver isso, podemos não guardar a nossa senha dentro do código, mas dentro de uma variável de ambiente, que ela não só facilita para você não publicar ela dentro do seu [ININTELIGÍVEL] de controle versão, mas como dentro da variável de ambiente, ela vai ser acessível por todos os pontos do seu programa, podemos apenas modificar nossa variável de ambiente.

[03:30] Dependendo se estamos em estágio de desenvolvimento ou de produção, que a nossa senha vai mudar para todas as partes do programa e não precisamos ficar alterando ponto a ponto. Para isso vamos ver como conseguimos usar variáveis de ambiente dentro do nosso projeto. Vamos criar um novo arquivo aqui na raiz do nosso projeto chamado “.env”.

[03:59] Nesse arquivo, vamos colocar CHAVE_JWT e como valor desse argumento, vamos colocar a nossa chave jwt que geramos. Então é dessa forma que colocamos como variável de ambiente, a nossa senha. Agora para guardarmos a nossa senha na variável de ambiente, precisamos primeiro criar um novo arquivo na raiz do nosso projeto, chamado “.env”.

[04:42] Nesse arquivo, vamos criar a variável de ambiente, nesse caso, vou chamar de CHAVE_JWT, essa que vai receber uma string com a chave. Nesse caso vamos só recortar do nosso controlador e colar na frente de CHAVE_JWT, agora a variável de ambiente vai receber esse valor, e particularmente, minha tela está colorida desse jeito porque eu instalei uma extensão de syntax highlighting, da extensão “dotEnv”].

[05:27] Agora sabemos que temos essa senha dentro de um arquivo .anv, mas como fazemos para ler essa variável de ambiente no nosso programa? Para isso vamos precisar de um pacote chamado “dotEnv”. Ele é feito para você conseguir ler a variável de ambiente dentro da sua aplicação node. Vamos instalar com npm instal dotenv@8.2.0.

[06:01] No caso estamos usando a versão “8.2.0”. Ele está instalando tudo certo, funcionou. Agora o que precisamos fazer? A primeira coisa que precisamos fazer é executar a configuração do “dotEnv” em no começo do nosso programa. Então em “BLOG-DO-CODIGO > server.js”, na primeira linha vamos executar require(‘dotenv’).config(), que configura todas as variáveis de ambiente dentro do nosso programa.

[06:58] A partir disso, podemos ler uma variável de ambiente, usando o objeto process, que é variável que já está dentro do nosso ambiente. Então, a variável process com elemento env e a variável de ambiente que queremos, nesse caso a CHAVE_JWT. Dessa forma conseguimos ler a variável chave CHAVE_JWT a partir de uma variável de ambiente, dentro do nosso projeto.

[07:38] Se você usa algum gerenciador de versão, por exemplo um git, colocaríamos esse .env dentro do gitgnore, dessa forma seu projeto público não iria junto com uma chave que deveria ser privada. Essa chave vai ser compartilhada dentro de todas seu programa note. É dessa forma que conseguimos criar a nossa CHAVE JWT e mais para frente, veremos como conseguimos criar a nossa estratégia com Tokens.