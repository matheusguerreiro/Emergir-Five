[00:00] Até agora temos um sistema de login funcional e já implementamos um processo de tratamento de erros autenticação do nosso projeto, só que ainda falta um ponto que não vimos, como conseguimos fazer logout em nosso API? Como implementamos esses sistema de conseguir realizar logout em uma autenticação com Tokens.

[00:24] Para começar a pensar em como resolver esse problema, podemos comparar com outros métodos sem Tokens, que é o método com sessão. Então como funciona uma autenticação logout com sessões? Bem, dado que o usuário já está autenticado, ele pode fazer uma requisição para efetuar logout e a sessão dele é deletada do servidor.

[00:51] Assim qualquer outra requisição que ele fizer não será aceita, dada que a sessão foi explicitamente deletada do servidor. Só que para Tokens não temos o mesmo comportamento. Porque por construção, um Token e válido para sempre, então se por acaso um usuário perdesse um Token, ou se ele for atacado por um atacante, ele pode usar esse Token nas próximas requisições, por um tempo indefinido.

[01:24] Porque esse Token vai ser sempre válido, ele sempre será uma credencial válida para autenticação do usuário. Então a primeira coisa a se fazer ao pensar em uma autenticação, em um logout com Tokens é que temos que inserir um tempo de expiração nesse Token. Mas onde podemos inserir esse tempo de expiração do Token? De que forma conseguimos fazer isso?

[01:58] Se irmos para usuarios-controlador.js, podemos inserir esse tempo de expiração usando a função jwt.sign. Podemos inserir como terceiro argumento dessa função, um objeto com opções, e nesse objeto podemos inserir a função expiresIn, e dizer o tempo de expiração que queremos que esse Token tenha.

[02:27] Então para nossa aplicação, um tempo de intervalo comum para esse tipo de coisa, é um intervalo de 15 minutos. Então colocamos uma string ’15m’. Agora todos os nossos Tokens terão um intervalo de tempo de expiração de 15 minutos. Uma coisa que você pode pensar é que ter esse intervalo de 15 minutos para expirar o Token, pode ser inconveniente para o usuário.

[02:58] Porque dessa forma, ele terá que realizar o login várias vezes. De 15 em 15 minutos, o Token que ele pegou a partir do login, ficará vencendo, então terá que realizar o login de 15 em 15 minutos para continuar usando nossa aplicação.

[03:18] Só que tem uma forma de contornar isso, que é criando um segundo tipo de Token, com tempo de vida maior, que vai permitir-nos conseguir renovar os nossos Tokens de tempo de vida curto, por baixo dos panos. Isso vai ser uma aplicação como front end, em que o usuário vai estar vendo, vai estar fazendo isso por baixo dos panos, mas vai sentir como se o Token nunca expirasse, só que internamente isso acontece.

[03:49] Esse tipo de implementação, vamos deixar mais para frente. Até o momento vamos usar só um Token com tempo de expiração de 15 minutos. Então dessa forma, toda vez que recebermos o nosso Token, ele vai estar embutindo o tempo de expiração dele dentro do Payload, e assim, ainda podemos ter mais um de erro em nossa aplicação.

[04:18] Se o usuário enviar um Token com tempo inválido, ele vai disparar esse erro na estratégia de autenticação, dizendo que o Token está inválido, e mais especificamente, dizendo que o Token está expirado. Então para tratar desse erro, podemos ir em “BLOG-DO-CODIGO > SRC > usuários > middlewares-autenticacao.js”, que são os nossos middlewares customizados, e adicionar mais uma verificação de erro.

[04:49] Então if(erro && erro.name === ‘TokenExpridedError’), se tivermos um erro de Token expirado, que é disparado pelo jwt.verify, vamos retornar a resposta com status(401) e um .json(erro: erro.message). Mas não só isso, também colocaremos uma data de quando ele foi expirado: expiradoEm: erro.expiredAt, que é um atributo do erro tokenExpiredError.

[05:53] Então conseguimos explicitar o tempo que Token foi expirado. Também podemos mandar isso para o usuário saber a quanto tempo o Token está expirado. Assim, além de adicionar o expiração, tratamos esse erro possível agora em nosso middleware de autenticação. Vamos testar para ver se isso está funcionado?

[06:14] Para isso vou alterar em “BLOG-DO-CODIGO > SRC > usuários > usuarios-controlador.js”, o tempo de expiração para 1 segundo. Assim conseguimos ver melhor o erro que dá com um tempo de expiração válido ou não. Então vamos iniciar nossa aplicação: npm start. No “Insomnia” vamos tentar fazer uma requisição. Primeiro fazer o login, do login pegamos nosso Token, o header, e usamos esse Token para um requisição de criação de post.

[07:10] Então na parte de autenticação, usamos o nosso Token e enviamos essa requisição com o Token que já deve estar expirado, porque passou mais de 1 segundo. Recebemos nosso código 401 e em “Preview”, temos nosso erro de jwt expired, nosso Token está expirado, e logo abaixo, ele fala o tempo que o Token está expirado.

[07:32] Se agora voltarmos para o nisso projeto, colocarmos para o tempo de 15 minutos, e realizarmos a requisição de login para receber mais um Token, agora esse Token vai estar válido porque ainda não passou de 15 minutos. Vamos criar o post com esse Token, e deu certo. Conseguimos criar o post porque o tempo de vida do Token estava dentro dos 15 minutos. Entendeu-se que o Token ainda estava válido, e foi permitida a criação do post.

[08:12] Agora que temos um modo de expirar os nossos Tokens, já colocamos essa barreira de segurança no Token em si, podemos começar a construir de que forma podemos implementar um sistema de logout usando esses Tokens.