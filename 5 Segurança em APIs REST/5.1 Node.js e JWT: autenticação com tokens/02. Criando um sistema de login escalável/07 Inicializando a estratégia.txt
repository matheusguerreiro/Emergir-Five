[00:00] Agora para finalizar nossa primeira estratégia de autenticação, a primeira coisa que vamos fazer é corrigir um pequeno erro. Em verificaSenha temos que colocar await, porque no caso devolve uma promise, então para manter essa estrutura de código, colocamos o await.

[00:22] Precisamos primeiro inicializar a nossa estratégia, então antes de inicializar em “app.js”, vamos no “index.js”, e fazer com que ele seja visível. Vamos exportar nosso módulo, na linha 5 vamos colocar estrategiasAutenticacao: require(‘./estratégias-autenticacao’). Dessa forma podemos importar o nosso módulo de outros arquivos.

[01:07] Agora vamos em “app.js”, e aqui vai inicializar a nossa estratégia de autenticação, no caso as outras estratégias que podemos ter no futuro. Por isso vamos pôr na linha 5: const { estrategiasAutenticacao } = require (‘./src/usuarios’). Então vamos importar as nossas estratégias de autenticação dos usuários, no “app.js” que é o arquivo de configuração do express.

[01:50] Agora com nossa estratégia já inicializada, vamos começar a fazer as rotas do nosso sistema de login, para isso vamos primeiro criar o controlador, em “usuarios-controlador.js”, que vai implementar a resposta depois de um login bem-sucedido. Vamos criar nossa função de login: (req, res) => que vai receber a requisição e a resposta.

[02:26] O que que ela vai devolver? No caso como a parte da requisição de fato, onde vai implementar a estratégia de autenticação, vai ser feita no middleware na rota, já temos a certeza que usuário dentro dessa função está autentificado. Então a única coisa que precisamos é devolver uma resposta como status 204, de página vazia. Então: res.status(204).send().

[03:02] Se o login foi bem-sucedido, ele só vai devolver “204”, deu tudo certo e não tem nada nessa página. Agora que vamos implementar na rota, a nossa rota de login. Em “usuarios-rotas.js”, vamos criar aqui uma nova rota. Nossa rota vai se chamar .route(‘/usuário/login’). Ela vai ser o método post, e o controlador que ele vai chamar vai ser o usuariosControlador.login.

[03:50] Dentro dessa rota, com método post, vamos inserir o middleware de autenticação suporte para isso então vamos importar o passport, const passport = require(‘passport’), e vamos usar o método do passport, que é .post(passport.authenticate(). Esse passport.authenticate recebe dois ou mais argumentos.

[04:27] O primeiro vai ser a estratégia que vamos usar nessa autenticação, no caso vamos usar a estratégia local, então colocamos string locale o segundo argumento que vamos colocar, vai estar relacionado ao fato de que não estamos mais usando sessões na nossa aplicação, vamos fazer um sistema de login sem sessões e como padrão para express é sessão como true, só precisamos configurar no objeto de configuração, session : false.

[05:05] Dessa forma configuramos o middleware de autenticação, que vai chamar nossa estratégia local, verificar se usuário, o cliente que enviou requisição, está autenticado ou não. É dessa forma que conseguimos inserir essa estratégia de autenticação na nossa aplicação e agora vamos testar para ver se está tudo funcionando certo.

[05:30] Então abrindo o terminal, vou colocar npm start, aparentemente está tudo funcionando. Vamos aqui no “Insomnia” e vamos criar uma nova requisição de login, vamos criar a requisição “Efetua login”, que vai ser uma requisição do método post com o corpo do formulário.

[05:58] Essa requisição vai ser uma requisição para método localhost:3000/usuario/login. No corpo da nossa requisição, vamos enviar o e-mail, nesse caso “andrew@alura.com.br” e a senha, nesse caso vai ser “123123123”. Vamos ver se está tudo funcionando essa daqui é as credenciais usuário cadastrado na base Então está tudo funcionando, essas daqui são as credencias do meu usuário cadastrado na base.

[06:35] Então está tudo certo. Ele enviou o código “204” que colocamos no controlador, então aparentemente ele está identificando quando um usuário é válido. Se por acaso enviar uma credencial inválida, eu errar a senha e colocar sem o último caractere, ele consegue identificar isso? Fazendo a requisição de novo ele dá um erro, e no erro ele fala e-mail e senha inválidos. Então conseguimos implementar nosso primeiro sistema de login usando a estratégia local.