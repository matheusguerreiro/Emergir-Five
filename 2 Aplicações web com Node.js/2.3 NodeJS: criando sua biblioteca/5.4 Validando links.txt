[00:00] Então qual que é o próximo passo para conseguirmos validar cada um dos links? O legal seria aqui extrair todas as URLs, o que eu estou chamando de link é cada conjunto de chave valor do objeto que tem o nome, como chave, o nome do link e como valor a URL.

[00:21] Para conseguirmos fazer o acesso, a requisição resposta de cada uma das ocorrências, cada uma das URLs, vamos fazer uma lista, ou seja, outro array apenas com as URLs porque dessa forma conseguimos passar para o JavaScript o array de URLs e ele vai tentar acessar todos de uma vez.

[00:44] Para isso, e voltando no nosso arquivo “http-validacao.js”, eu vou criar uma outra função function, eu vou chamar essa função de function geraArrayDeURLs(), e vai receber como parâmetro o arrayLinks que é o que já estamos pegando, que já está sendo exibido no terminal, tudo bem.

[01:10] Vamos dar mais uma olhada no nosso link para entendermos como que isso tem que ser feito, o array atual de resultados, cada um dos índices é um objeto que tem só um conjunto de chave valor, se temos aqui um array, qualquer coisa que temos que fazer que envolva puxar valores de dentro de arrays, significa que temos que fazer um laço de repetição, tem que fazer um loop que itere, que percorra esse array e consiga trabalhar resultado por resultado, ou seja, o primeiro índice, o segundo índice, o índice zero, índice um, índice dois, etc.

[01:53] Então o que tem que ser feito aqui é um loop que pegue para cada objeto, e cada objeto tem o seu conjunto de chave e valor, o JavaScript tem um método chamado Object.values() e esse método ele é um método de objeto, então ele recebe um objeto por parâmetro, um objeto, e esse método Object.values, eu vou voltar no terminal novamente para vermos o array, esse método ele acessa um objeto, e ponto value .value, ele consegue pegar apenas o valor do conjunto de chave valor, e ele retorna esse valor dentro de um array.

[02:41] Então Object.values eu vou por enquanto comentar, ele vai pegar um objeto, //objeto e vai retornar um array apenas com o valor, ->[valor], então para cada ocorrência, ou seja, para cada um dos objetos do nosso array, se utilizarmos esse método ele vai pegar a URL, que é o valor de cada chave valor, e vai colocar dentro de um array e responder para nós, retornar isso para nós.

[03:17] Então já temos duas informações, temos que percorrer o loop do array de resultados, e dentro desse array de resultados trabalhar com cada um dos objetos, nesse caso como queremos que o retorno seja outra lista, ou seja, o retorno seja um outro array, porém somente com as URLs, podemos usar um método que é o map, então arrayLinks.map, que é o método de array do JavaScript, que ele executa, vamos dizer para ele o que tem que executar com cada índice do array, ou seja, cada um dos nossos objetos e vai retornar um outro array só com os resultados desse processamento.

[03:59] Vamos ver como isso vai funcionar? O map é um método que trabalha com funções callback, ou seja, o que temos que passar por parâmetro para o map, é uma outra função que fazer vai ser executada e vai fazer o processamento que queremos, então o arrayLinks.map(), dentro do parâmetro, vamos criar essa função.

[04:19] Cada um dos índices do array é um objetoLink, então eu passo isso como parâmetro que o parâmetro é um objetoLink, crio, abro a arrow function, =>, objetoLink então para cada um dos objetos, aí sim, podemos utilizar um método Object.values() recebendo por parâmetro objetoLink, que é cada um dos índices do array.

[04:54] Então para cada loop, para cada laço de repetição, o que vai ter guardado dentro do parâmetro da função callback, é cada um dos objetos, primeiro o objeto que está no índice zero, objeto que está no índice um, e por ai vai.

[05:08] Então Object.values recebendo cada um dos objetos de link vai pegar apenas o valor da chave valor, que é a URL que queremos, eu vou retornar, dar um return nesse arrayLinks.map e na função validaURLs, que por enquanto está só recebendo o array original e retornando ele, ao invés de pedir para ele retornar o arrayLinks, ele vai retornar agora o resultado da função geraArrayDeURLs, recebendo como parâmetro o arrayLinks original que estamos vendo no terminal agora, que é de onde queremos extrair os nossos links, eu vou salvar.

[05:45] Vamos voltar no terminal, vou limpar o terminal, e executar, e o que nos retornou, foi um array com as URLs, só que cada URL está dentro de um array, então um array de arrays, cada um com uma URL dentro, é o resultado que esperávamos, por que? Object.values retorna um array sempre com todos os valores de um objeto, como cada dos objetos que estamos trabalhando, ele por enquanto só temos um conjunto de chave valor, ele colocou esse valor dentro de um array, passou para o próximo, colocou o valor dentro de um array, passou para o próximo.

[06:27] Mas isso conseguimos resolver com outro método do JavaScript para arrays que chama join, então logo depois que passarmos Object.values vamos concatenar com outro método que chama .join(), só abre e fecha parênteses, sem passar nada dentro.

[06:45] O que vai acontecer é que o join() é um método que ele tira os elementos de dentro de um array, e transforma em uma string, então para cada, concatenamos o join() com o Object.values, então após extrair o valor de cada um dos objetos, o JavaScript vai colocar isso dentro de um array e logo em seguida vai tirar com o join(), que o join() faz é justamente isso, ele tira e transforma, tira de dentro de um array e manda uma string para fora, fazendo dessa forma o nosso map(), agora ele deve receber apenas as strings de URL.

[07:23] Vou limpar o terminal, rodar novamente e agora sim temos um array com apenas as URLs de cada uma das nossas ocorrências no texto, e agora conseguimos passar essa lista, esse array de URLs para o JavaScript acessar cada uma dessas e dizer para nós se é 200, se é 404, se é alguma coisa na faixa do 300, o que seja, mas isso vamos fazer no próximo vídeo.