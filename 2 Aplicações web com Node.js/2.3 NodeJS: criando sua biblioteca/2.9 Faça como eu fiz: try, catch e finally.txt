Durante a aula, aprendemos a utilizar os blocos try e catch, que são as ferramentas do JavaScript para “captura” de exceções. Ou seja, qualquer erro ocorrido durante a execução do código no bloco try é tratado dentro do bloco catch.

Ainda existe um último bloco, o finally, que é executado sempre, independentemente da execução do código ter sido resolvida no try ou gerado um erro passado para o catch. Tanto catch quanto finally são opcionais, mas o try deve sempre estar acompanhado de um ou outro.

Ao contrário do catch, o finally não recebe nenhum dado através dos parênteses ( ). Vamos refatorar a função feita durante a aula para adicionar este bloco:

1) Na função pegaArquivo() adicionamos um bloco finally após o catch():

async function pegaArquivo(caminhoDoArquivo) {
 const encoding = 'utf-8';
 try {
   const texto = await fs.promises.readFile(caminhoDoArquivo, encoding)
   console.log(chalk.green(texto))
 } catch(erro) {
   trataErro(erro);
 } finally {

 }
}

Lembrando que todo o código dentro do bloco finally sempre será executado. Não fará diferença se o processamento tiver sido efetuado com sucesso (o código manteve-se dentro do bloco try) ou tiver gerado alguma exceção que foi lançada ao bloco catch(). No caso acima, podemos acrescentar uma mensagem avisando o usuário que o programa finalizou:

async function pegaArquivo(caminhoDoArquivo) {
 const encoding = 'utf-8';
 try {
   const texto = await fs.promises.readFile(caminhoDoArquivo, encoding)
   console.log(chalk.green(texto))
 } catch(erro) {
   trataErro(erro);
 } finally {
   console.log(chalk.yellow('operação concluída'));
 }
}

Teste o código e verá que a mensagem operação concluída vai ser exibida no console em ambos os casos.