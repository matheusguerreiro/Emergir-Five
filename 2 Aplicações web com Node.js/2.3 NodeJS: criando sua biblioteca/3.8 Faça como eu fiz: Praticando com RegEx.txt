Podemos pensar nos usos mais diversos para as expressões regulares. Além dos mecanismos de busca, pode ser utilizada para buscar e substituir trechos de textos e palavras, validação de campos de entrada de dados (por exemplo, formatos de CEP e CPF), raspagem de dados e inclusive em um recurso super útil de editores de código como o Visual Studio Code, o realce de sintaxe - quando o editor identifica com cores diferentes as diversas partes do código, como funções, strings e variáveis.

Vamos praticar mais um pouco? Ao invés de capturar todos os links completos, dessa vez vamos capturar apenas a parte do protocolo e do domínio principal de cada link, por exemplo <protocolo>://<dominioprincipal.com>/. Você pode usar o regex101(https://regex101.com/) como fizemos na aula, e o mesmo texto que está sendo trabalhado no curso.

Montando a expressão
Começamos observando os padrões na sequência que queremos capturar: todos os links começam da mesma forma, a partir de http, e terminam na primeira /. Então podemos começar a expressão dessa forma:

https?: a sequência exata de letras http e s ocorrendo de 0 até 1 vez.

Em seguida temos :// que sempre ocorre da mesma forma:

https?:\/\/: como / é um meta-char, temos que usar a barra invertida para “escapar” este char, ou seja, para que seja considerado literalmente e não como meta-char.

A primeira classe, ou seja, o primeiro conjunto de caracteres antes do ., permanece o mesmo que usamos na aula:

https?:\/\/[^\s$.?#].: todos os caracteres exceto $, ., ?, # e sem espaços em branco \s.

Agora a expressão deve parar que capturar os caracteres logo após a primeira /, então a segunda classe de caracteres vai ficar um pouco diferente:

https?:\/\/[^\s$.?#].[^\/\s]: após o ponto, todos os caracteres com exceção de \s (espaços em branco) e agora também \/, barra. Lembrando que / deve ser “escapada” para ser considerada como um caractere e não um meta-char.

Agora podemos finalizar, fazendo a expressão parar na primeira barra:

https?:\/\/[^\s$.?#].[^\/\s]*\/: acrescentamos * ao final, para que a expressão localize 0 ou mais ocorrências consecutivas entre . e /. Ou seja, para que a expressão localize tanto https://dominio.com/ quanto https://www.dominio.com.br/.